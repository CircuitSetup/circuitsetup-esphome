substitutions:
  rtttl_boop: boop:d=32,o=5,b=100:d#
  rtttl_gotit: got_it:d=32,o=5,b=100:d#,a#,be
  rtttl_scaleup: scale_up:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b
  rtttl_success: success:d=4,o=6,b=160:8e6,16f6,16g6,8a6,8g6,8e6,8g6,8a6

globals:
  # QC OK means the self-test has passed at least once
  - id: qcok
    type: bool
    restore_value: true
  
  # True when self test is active
  - id: self_test
    type: bool


esphome:
  on_boot:
    priority: 100
    then:
      - lambda: !lambda |-
          ESP_LOGI("Konnected-GDO-Test", "qcok: %d", id(qcok));
      - delay: 5s
      - lambda: !lambda |-
          ESP_LOGI("Konnected-GDO-Test", "qcok: %d", id(qcok));
      - if:
          condition:
            lambda: return !id(qcok);
          then:
            - script.execute: script_self_test

button:
  - platform: template
    id: button_self_test_start
    name: ~TEST Script Start
    internal: true
    entity_category: diagnostic
    on_press:
      then:
        - script.execute: script_self_test

  - platform: template
    id: button_self_test_stop
    name: ~TEST Stop
    internal: true
    entity_category: diagnostic
    on_press:
      then:
        - script.execute: script_self_test_stop

  - platform: template
    id: button_fcc_test_start
    name: ~FCC TEST STart
    entity_category: diagnostic
    internal: True
    on_press:
      then:
        - script.execute: script_fcc_test

  - platform: factory_reset
    name: Factory Reset
    entity_category: diagnostic
    internal: true

script:
  - id: script_self_test
    then:
      
      ###
      # Initialize Self-test
      - globals.set:
          id: self_test
          value: 'true'
      - lambda: id(button_self_test_stop).set_internal(false);
      - lambda: ESP_LOGI("Konnected-GDO-Test","Starting Self-Test");
      - rtttl.play: $rtttl_scaleup
      - wait_until:
          condition:
            not:
              rtttl.is_playing
      - script.execute: script_boop
      - lambda: ESP_LOGI("Konnected-GDO-Test","Setting range calibration to 30cm");
      - number.set:
          id: open_garage_door_distance_from_ceiling
          value: 0.3

      ###
      # Test ToF sensor detection at 30cm
      - lambda: ESP_LOGI("Konnected-GDO-Test","Hold an object 30cm above the sensor.");
      - wait_until:
          condition: 
            binary_sensor.is_on: garage_door_range_sensor
          timeout: 60s
      - logger.log:
          level: INFO
          format: "ToF Sensor Got Distance: %.2f m"
          args: [ 'id(range_sensor).state']
      - lambda: ESP_LOGI("Konnected-GDO-Test","Got it!");
      - wait_until:
          condition:
            not:
              rtttl.is_playing
      - rtttl.play: $rtttl_gotit
      - light.turn_on: warning_led
      - delay: 500ms
      - light.turn_off: warning_led

      ###
      # Test ToF sensor detection at 0cm
      - lambda: ESP_LOGI("Konnected-GDO-Test","Now cover the sensor.");
      - wait_until:
          condition: 
            - sensor.in_range:
                id: range_sensor
                below: 0.05
          timeout: 60s        
      - logger.log:
          level: INFO
          format: "ToF Sensor Got Distance: %.2f m"
          args: [ 'id(range_sensor).state']
      - lambda: ESP_LOGI("Konnected-GDO-Test","Got it!");
      - wait_until:
          condition:
            not:
              rtttl.is_playing
      - rtttl.play: $rtttl_gotit
      - light.turn_on: warning_led
      - delay: 500ms
      - light.turn_off: warning_led
              
      ###
      # Test IN and DOOR relay
      - lambda: ESP_LOGI("Konnected-GDO-Test","Testing wired input is OPEN");
      - wait_until: 
          condition:
            binary_sensor.is_on: garage_door_input
          timeout: 60s
      - lambda: ESP_LOGI("Konnected-GDO-Test","Next, connect IN terminals to DOOR terminals to test the relay");
      - output.turn_on: garage_door_opener_output
      - wait_until:
          condition:
            - binary_sensor.is_off: garage_door_input
          timeout: 60s

      ###
      # Success and cleanup
      - lambda: ESP_LOGI("Konnected-GDO-Test","Nice! Relay and input worked!");
      - globals.set:
          id: self_test
          value: 'false'
      - globals.set:
          id: qcok
          value: 'true'
      - rtttl.play: $rtttl_gotit
      - output.turn_off: garage_door_opener_output
      - light.turn_on: warning_led
      - delay: 500ms
      - light.turn_off: warning_led
      - rtttl.play: $rtttl_success

  - id: script_self_test_stop
    then:
      - lambda: !lambda |-
          ESP_LOGI("Konnected-GDO-Test", "qcok: %d", id(qcok));
      - globals.set:
          id: self_test
          value: 'false'
      - globals.set:
          id: qcok
          value: 'true'
      - lambda: global_preferences->sync();
      - lambda: !lambda |-
          ESP_LOGI("Konnected-GDO-Test", "qcok: %d", id(qcok));
      - script.stop: script_self_test
      - lambda: id(button_self_test_stop).set_internal(true);

  - id: script_boop
    then:
      - while:
          condition: 
            lambda: return id(self_test);
          then:
            - rtttl.play: boop:d=32,o=5,b=100:d#
            - delay: 1s
          
  # Script to put the device in non-transmission mode and cycle thru
  # all   
  - id: script_fcc_test
    then:
     # TODO: disable API timeout
      - wifi.disable:
      - repeat:
          count: 10000
          then:
            - rtttl.play: $rtttl_scaleup
            - light.turn_on: warning_led
            - delay: 500ms
            - light.turn_off: warning_led
            - button.press: garage_door_opener_button
            - switch.turn_on: output_switch
            - delay: 300ms
            - switch.turn_off: output_switch
            - delay: 1s
     
